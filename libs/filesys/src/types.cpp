#include "types.hpp"

#include "stream.hpp"

void fsys::read_var(std::istream &is, const DATATYPE &type, void *value)
{
    switch (type)
    {
/* */        case DATATYPE::INT8: read_var(is, *reinterpret_cast<int8_t*>(value)); break;
/* */        case DATATYPE::UINT8: read_var(is, *reinterpret_cast<uint8_t*>(value)); break;
/* */        case DATATYPE::INT16: read_var(is, *reinterpret_cast<int16_t*>(value)); break;
/* */        case DATATYPE::UINT16: read_var(is, *reinterpret_cast<uint16_t*>(value)); break;
/* */        case DATATYPE::INT32: read_var(is, *reinterpret_cast<int32_t*>(value)); break;
/* */        case DATATYPE::UINT32: read_var(is, *reinterpret_cast<uint32_t*>(value)); break;
/* */        case DATATYPE::INT64: read_var(is, *reinterpret_cast<int64_t*>(value)); break;
/* */        case DATATYPE::UINT64: read_var(is, *reinterpret_cast<uint64_t*>(value)); break;
/* */        case DATATYPE::FLOAT32: read_var(is, *reinterpret_cast<float*>(value)); break;
/* */        case DATATYPE::FLOAT64: read_var(is, *reinterpret_cast<double*>(value)); break;
/* */        case DATATYPE::STRING: read_var(is, *reinterpret_cast<std::string*>(value)); break;
/* */        case DATATYPE::BOOL: read_var(is, *reinterpret_cast<bool*>(value)); break;
/* */        case DATATYPE::VECTR_INT8: read_var(is, *reinterpret_cast<std::vector<int8_t>*>(value)); break;
/* */        case DATATYPE::VECTR_UINT8: read_var(is, *reinterpret_cast<std::vector<uint8_t>*>(value)); break;
/* */        case DATATYPE::VECTR_INT16: read_var(is, *reinterpret_cast<std::vector<int16_t>*>(value)); break;
/* */        case DATATYPE::VECTR_UINT16: read_var(is, *reinterpret_cast<std::vector<uint16_t>*>(value)); break;
/* */        case DATATYPE::VECTR_INT32: read_var(is, *reinterpret_cast<std::vector<int32_t>*>(value)); break;
/* */        case DATATYPE::VECTR_UINT32: read_var(is, *reinterpret_cast<std::vector<uint32_t>*>(value)); break;
/* */        case DATATYPE::VECTR_INT64: read_var(is, *reinterpret_cast<std::vector<int64_t>*>(value)); break;
/* */        case DATATYPE::VECTR_UINT64: read_var(is, *reinterpret_cast<std::vector<uint64_t>*>(value)); break;
/* */        case DATATYPE::VECTR_FLOAT32: read_var(is, *reinterpret_cast<std::vector<float>*>(value)); break;
/* */        case DATATYPE::VECTR_FLOAT64: read_var(is, *reinterpret_cast<std::vector<double>*>(value)); break;
/* */        case DATATYPE::VECTR_STRING: read_var(is, *reinterpret_cast<std::vector<std::string>*>(value)); break;
/* */        case DATATYPE::VECTR_BOOL: read_var(is, *reinterpret_cast<std::vector<bool>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_INT8: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_INT16: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_INT32: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_INT64: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_STRING: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_INT8_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<int8_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_INT8: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_INT16: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_INT32: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_INT64: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_STRING: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT8_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<uint8_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_INT8: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_INT16: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_INT32: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_INT64: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_STRING: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_INT16_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<int16_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_INT8: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_INT16: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_INT32: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_INT64: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_STRING: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT16_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<uint16_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_INT8: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_INT16: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_INT32: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_INT64: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_STRING: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_INT32_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<int32_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_INT8: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_INT16: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_INT32: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_INT64: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_STRING: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT32_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<uint32_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_INT8: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_INT16: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_INT32: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_INT64: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_STRING: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_INT64_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<int64_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_INT8: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_INT16: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_INT32: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_INT64: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, float>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, double>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_STRING: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_UINT64_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<uint64_t, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_INT8: read_var(is, *reinterpret_cast<std::unordered_map<float, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<float, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_INT16: read_var(is, *reinterpret_cast<std::unordered_map<float, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<float, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_INT32: read_var(is, *reinterpret_cast<std::unordered_map<float, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<float, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_INT64: read_var(is, *reinterpret_cast<std::unordered_map<float, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<float, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<float, float>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<float, double>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_STRING: read_var(is, *reinterpret_cast<std::unordered_map<float, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT32_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<float, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_INT8: read_var(is, *reinterpret_cast<std::unordered_map<double, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<double, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_INT16: read_var(is, *reinterpret_cast<std::unordered_map<double, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<double, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_INT32: read_var(is, *reinterpret_cast<std::unordered_map<double, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<double, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_INT64: read_var(is, *reinterpret_cast<std::unordered_map<double, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<double, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<double, float>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<double, double>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_STRING: read_var(is, *reinterpret_cast<std::unordered_map<double, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_FLOAT64_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<double, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_INT8: read_var(is, *reinterpret_cast<std::unordered_map<std::string, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<std::string, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_INT16: read_var(is, *reinterpret_cast<std::unordered_map<std::string, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<std::string, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_INT32: read_var(is, *reinterpret_cast<std::unordered_map<std::string, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<std::string, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_INT64: read_var(is, *reinterpret_cast<std::unordered_map<std::string, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<std::string, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<std::string, float>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<std::string, double>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_STRING: read_var(is, *reinterpret_cast<std::unordered_map<std::string, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_STRING_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<std::string, bool>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_INT8: read_var(is, *reinterpret_cast<std::unordered_map<bool, int8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_UINT8: read_var(is, *reinterpret_cast<std::unordered_map<bool, uint8_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_INT16: read_var(is, *reinterpret_cast<std::unordered_map<bool, int16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_UINT16: read_var(is, *reinterpret_cast<std::unordered_map<bool, uint16_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_INT32: read_var(is, *reinterpret_cast<std::unordered_map<bool, int32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_UINT32: read_var(is, *reinterpret_cast<std::unordered_map<bool, uint32_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_INT64: read_var(is, *reinterpret_cast<std::unordered_map<bool, int64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_UINT64: read_var(is, *reinterpret_cast<std::unordered_map<bool, uint64_t>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_FLOAT32: read_var(is, *reinterpret_cast<std::unordered_map<bool, float>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_FLOAT64: read_var(is, *reinterpret_cast<std::unordered_map<bool, double>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_STRING: read_var(is, *reinterpret_cast<std::unordered_map<bool, std::string>*>(value)); break;
/* */        case DATATYPE::UMAP_BOOL_BOOL: read_var(is, *reinterpret_cast<std::unordered_map<bool, bool>*>(value)); break;
    }
    return;
}

void fsys::write_var(std::ostream &os, const DATATYPE &type, const void *value)
{
    switch (type)
    {
        case DATATYPE::INT8: write_var(is, *reinterpret_cast<const int8_t*>(value)); break;
        case DATATYPE::UINT8: write_var(is, *reinterpret_cast<const uint8_t*>(value)); break;
        case DATATYPE::INT16: write_var(is, *reinterpret_cast<const int16_t*>(value)); break;
        case DATATYPE::UINT16: write_var(is, *reinterpret_cast<const uint16_t*>(value)); break;
        case DATATYPE::INT32: write_var(is, *reinterpret_cast<const int32_t*>(value)); break;
        case DATATYPE::UINT32: write_var(is, *reinterpret_cast<const uint32_t*>(value)); break;
        case DATATYPE::INT64: write_var(is, *reinterpret_cast<const int64_t*>(value)); break;
        case DATATYPE::UINT64: write_var(is, *reinterpret_cast<const uint64_t*>(value)); break;
        case DATATYPE::FLOAT32: write_var(is, *reinterpret_cast<const float*>(value)); break;
        case DATATYPE::FLOAT64: write_var(is, *reinterpret_cast<const double*>(value)); break;
        case DATATYPE::STRING: write_var(is, *reinterpret_cast<const std::string*>(value)); break;
        case DATATYPE::BOOL: write_var(is, *reinterpret_cast<const bool*>(value)); break;
        case DATATYPE::VECTR_INT8: write_var(is, *reinterpret_cast<const std::vector<int8_t>*>(value)); break;
        case DATATYPE::VECTR_UINT8: write_var(is, *reinterpret_cast<const std::vector<uint8_t>*>(value)); break;
        case DATATYPE::VECTR_INT16: write_var(is, *reinterpret_cast<const std::vector<int16_t>*>(value)); break;
        case DATATYPE::VECTR_UINT16: write_var(is, *reinterpret_cast<const std::vector<uint16_t>*>(value)); break;
        case DATATYPE::VECTR_INT32: write_var(is, *reinterpret_cast<const std::vector<int32_t>*>(value)); break;
        case DATATYPE::VECTR_UINT32: write_var(is, *reinterpret_cast<const std::vector<uint32_t>*>(value)); break;
        case DATATYPE::VECTR_INT64: write_var(is, *reinterpret_cast<const std::vector<int64_t>*>(value)); break;
        case DATATYPE::VECTR_UINT64: write_var(is, *reinterpret_cast<const std::vector<uint64_t>*>(value)); break;
        case DATATYPE::VECTR_FLOAT32: write_var(is, *reinterpret_cast<const std::vector<float>*>(value)); break;
        case DATATYPE::VECTR_FLOAT64: write_var(is, *reinterpret_cast<const std::vector<double>*>(value)); break;
        case DATATYPE::VECTR_STRING: write_var(is, *reinterpret_cast<const std::vector<std::string>*>(value)); break;
        case DATATYPE::VECTR_BOOL: write_var(is, *reinterpret_cast<const std::vector<bool>*>(value)); break;
        case DATATYPE::UMAP_INT8_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_INT8_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, float>*>(value)); break;
        case DATATYPE::UMAP_INT8_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, double>*>(value)); break;
        case DATATYPE::UMAP_INT8_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_INT8_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<int8_t, bool>*>(value)); break;
        case DATATYPE::UMAP_UINT8_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT8_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, float>*>(value)); break;
        case DATATYPE::UMAP_UINT8_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, double>*>(value)); break;
        case DATATYPE::UMAP_UINT8_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_UINT8_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<uint8_t, bool>*>(value)); break;
        case DATATYPE::UMAP_INT16_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_INT16_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, float>*>(value)); break;
        case DATATYPE::UMAP_INT16_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, double>*>(value)); break;
        case DATATYPE::UMAP_INT16_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_INT16_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<int16_t, bool>*>(value)); break;
        case DATATYPE::UMAP_UINT16_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT16_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, float>*>(value)); break;
        case DATATYPE::UMAP_UINT16_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, double>*>(value)); break;
        case DATATYPE::UMAP_UINT16_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_UINT16_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<uint16_t, bool>*>(value)); break;
        case DATATYPE::UMAP_INT32_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_INT32_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, float>*>(value)); break;
        case DATATYPE::UMAP_INT32_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, double>*>(value)); break;
        case DATATYPE::UMAP_INT32_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_INT32_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<int32_t, bool>*>(value)); break;
        case DATATYPE::UMAP_UINT32_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT32_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, float>*>(value)); break;
        case DATATYPE::UMAP_UINT32_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, double>*>(value)); break;
        case DATATYPE::UMAP_UINT32_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_UINT32_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<uint32_t, bool>*>(value)); break;
        case DATATYPE::UMAP_INT64_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_INT64_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, float>*>(value)); break;
        case DATATYPE::UMAP_INT64_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, double>*>(value)); break;
        case DATATYPE::UMAP_INT64_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_INT64_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<int64_t, bool>*>(value)); break;
        case DATATYPE::UMAP_UINT64_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, int8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, int16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, int32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, int64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_UINT64_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, float>*>(value)); break;
        case DATATYPE::UMAP_UINT64_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, double>*>(value)); break;
        case DATATYPE::UMAP_UINT64_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, std::string>*>(value)); break;
        case DATATYPE::UMAP_UINT64_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<uint64_t, bool>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<float, int8_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<float, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<float, int16_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<float, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<float, int32_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<float, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<float, int64_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<float, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<float, float>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<float, double>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<float, std::string>*>(value)); break;
        case DATATYPE::UMAP_FLOAT32_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<float, bool>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<double, int8_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<double, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<double, int16_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<double, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<double, int32_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<double, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<double, int64_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<double, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<double, float>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<double, double>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<double, std::string>*>(value)); break;
        case DATATYPE::UMAP_FLOAT64_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<double, bool>*>(value)); break;
        case DATATYPE::UMAP_STRING_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, int8_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, int16_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, int32_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, int64_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_STRING_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, float>*>(value)); break;
        case DATATYPE::UMAP_STRING_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, double>*>(value)); break;
        case DATATYPE::UMAP_STRING_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, std::string>*>(value)); break;
        case DATATYPE::UMAP_STRING_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<std::string, bool>*>(value)); break;
        case DATATYPE::UMAP_BOOL_INT8: write_var(is, *reinterpret_cast<const std::unordered_map<bool, int8_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_UINT8: write_var(is, *reinterpret_cast<const std::unordered_map<bool, uint8_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_INT16: write_var(is, *reinterpret_cast<const std::unordered_map<bool, int16_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_UINT16: write_var(is, *reinterpret_cast<const std::unordered_map<bool, uint16_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_INT32: write_var(is, *reinterpret_cast<const std::unordered_map<bool, int32_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_UINT32: write_var(is, *reinterpret_cast<const std::unordered_map<bool, uint32_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_INT64: write_var(is, *reinterpret_cast<const std::unordered_map<bool, int64_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_UINT64: write_var(is, *reinterpret_cast<const std::unordered_map<bool, uint64_t>*>(value)); break;
        case DATATYPE::UMAP_BOOL_FLOAT32: write_var(is, *reinterpret_cast<const std::unordered_map<bool, float>*>(value)); break;
        case DATATYPE::UMAP_BOOL_FLOAT64: write_var(is, *reinterpret_cast<const std::unordered_map<bool, double>*>(value)); break;
        case DATATYPE::UMAP_BOOL_STRING: write_var(is, *reinterpret_cast<const std::unordered_map<bool, std::string>*>(value)); break;
        case DATATYPE::UMAP_BOOL_BOOL: write_var(is, *reinterpret_cast<const std::unordered_map<bool, bool>*>(value)); break;
    }
    return;
}
